<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Constants</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// distance the hook spawns out from the center of the player
spawn_dist = 24;
// the speed the player goes towards the hook
pull_speed = 24;
// the distance away from the hook the player stops
stop_distance = 4;
// set to true to not shoot on the next step
no_shoot = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Hook management</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// If the player releases their left click and a hook is not present
// then create a hook and send it to the mouse
if (mouse_check_button_released(mb_left) &amp;&amp; !instance_exists(obj_hook) &amp;&amp; no_shoot==false) {
    // this angle is used for spawning the hook and the trajectory of it
    // NOTE: this is in degrees
    angle = point_direction(self.x,self.y,mouse_x,mouse_y);
    
    // NOTE: pi/190 is needed because cos and sin take a radians input
    relative_x = spawn_dist * cos(angle*pi/180);
    // NOTE: spawn_dist must be negative here because negative is up
    relative_y = -spawn_dist * sin(angle*pi/180);
    
    instance_create(x+relative_x,y+relative_y,obj_hook);
    
    // make the hook point the correct direction
    obj_hook.direction = angle;
    // NOTE: -90 makes it rotate the propper direction
    // this is because the sprite is pointing up and up is 90 so -90 cancels it out
    obj_hook.image_angle = obj_hook.direction-90;
}

// If the player releases their right click and a hook is present
// then destroy the current hook
if (mouse_check_button_released(mb_right) &amp;&amp; instance_exists(obj_hook)) {
    // destroy the first instance of the hook
    instance_destroy(instance_find(obj_hook,0));
}

// allow a hook to be shot again
no_shoot = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Pull hook</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(obj_hook)) {
    angle = point_direction(self.x,self.y,obj_hook.x,obj_hook.y);
    
    // DEFAULT PULLING
    // If space/left click is held and the hook is hooked and the player is more than 1
    // step away from being within the stop distance
    // then step the player into the direction of the hook once
    if ((keyboard_check(vk_space) || mouse_check_button(mb_left)) &amp;&amp;
        obj_hook.hooked &amp;&amp;
        distance_to_object(obj_hook)&gt;(stop_distance+pull_speed)) {
        
        // NOTE: pi/190 is needed because cos and sin take a radians input
        x+= pull_speed * cos(angle*pi/180);
        // NOTE: spawn_dist must be negative here because negative is up
        y+= -pull_speed * sin(angle*pi/180);
    }
    
    // JUMP TO STOP_DISTANCE
    // If space/left click is held and the hook is hooked and the player can step
    // to the stop_distance in a step, then jump to the stop_distance
    else if ((keyboard_check(vk_space) || mouse_check_button(mb_left)) &amp;&amp;
        obj_hook.hooked &amp;&amp;
        distance_to_object(obj_hook)&gt;stop_distance) {
    
        // only move the difference to move to the stop distance
        difference = distance_to_object(obj_hook) - stop_distance;
        
        // NOTE: pi/190 is needed because cos and sin take a radians input
        x+= difference * cos(angle*pi/180);
        // NOTE: spawn_dist must be negative here because negative is up
        y+= -difference * sin(angle*pi/180);
    }
    
    // AUTO REMOVE HOOK
    // if the player is within the stop distance, and stopped pulling the hook
    // while it is in a wall,
    // then delete it and don't shoot one this step 
    else if ((keyboard_check_released(vk_space) || mouse_check_button_released(mb_left)) &amp;&amp;
        obj_hook.hooked &amp;&amp; distance_to_object(obj_hook)&lt;=stop_distance) {
        
        instance_destroy(obj_hook);
        no_shoot = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
