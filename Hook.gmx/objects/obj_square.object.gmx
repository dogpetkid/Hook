<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_square</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>11</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Constants</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>move_speed = 1;
// keep the yellow color
image_speed = 0;
image_index = 0;

// action code constants
DESTROY = 0;
MOVE_DESTROY = 1;
PLACE = 2;
MOVE_PLACE = 3;

block_type=-1;
place_x=-1;
place_y=-1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Figure out what to do</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// action describes what the what the square will do
// 0 is destroy a block
// 1 is move a block
// 2 is place a block
action = irandom(2);

// if a block is being moved or destroyed, it must happen first
if (action==DESTROY || action==MOVE_DESTROY) {
    // determine the block that should be removed
    black = instance_number(obj_wall_unhookable);
    white = instance_number(obj_wall_hookable);
    
    // add all unhookable walls to the list
    for (i=0;i&lt;black;i++) {
        block_list[i] = instance_find(obj_wall_unhookable,i);
    }
    for (i=0;i&lt;white;i++) {
        block_list[i+black] = instance_find(obj_wall_hookable,i);
    }
    
    // pick a random block that exists
    block = block_list[irandom(black+white-1)];
}

// if block is to be placed the find a place to put it
if (action == PLACE) {
    event_user(0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Check if block still exists</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// if the block to be manipluated does not exist
// pick another by making a clone and destroying self
if (action==DESTROY || action==MOVE_DESTROY || action==MOVE_PLACE) {
    
    if (!instance_exists(block)) {
        show_debug_message(string(block)+" doesn't exists");
        instance_create(x,y,obj_square);
        instance_destroy();
    }
    

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Destroy Phase</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (action==DESTROY || action==MOVE_DESTROY) {

    // +16 to get the middle of the block
    direction = point_direction(x,y,block.x+16,block.y+16);
    
    // move towards the location
    // NOTE: pi/190 is needed because cos and sin take a radians input
    x+= move_speed * cos(direction*pi/180);
    // NOTE: spawn_dist must be negative here because negative is up
    y+= -move_speed * sin(direction*pi/180);
    
    // if at block's location
    if (distance_to_point(block.x+16,block.y+16) &lt; move_speed) {
        // If moving the block, teleport it offscreen
        if (action == MOVE_DESTROY) {
            block.x = -room_width;
            block.y = -room_height;
            action = MOVE_PLACE;
            event_user(0);
        } else {
            // otherwise the block can be destroyed and so can self
            instance_destroy(block);
            instance_destroy();
        }
    }

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Place Phase</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (action==PLACE || action==MOVE_PLACE) {

    // +16 to get the middle of the block
    direction = point_direction(x,y,place_x+16,place_y+16);
    
    // move towards the location
    // NOTE: pi/190 is needed because cos and sin take a radians input
    x+= move_speed * cos(direction*pi/180);
    // NOTE: spawn_dist must be negative here because negative is up
    y+= -move_speed * sin(direction*pi/180);

    // if at place location
    if (distance_to_point(place_x+16,place_y) &lt; move_speed+16) {
        // If placing the block after moving it, then teleport it onscreen
        if (action == MOVE_PLACE) {
            block.x = place_x;
            block.y = place_y;
            instance_destroy();
        } else {
            // otherwise just create the block
            if (block_type == 0) instance_create(place_x,place_y,obj_wall_hookable);
            else instance_create(place_x,place_y,obj_wall_unhookable);
            instance_destroy();
        }
        
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Place phase start</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// if the block type isn't there already
if (action==PLACE) {
    block_type = irandom(1);
    // change the image to represent the block to be placed
    image_index = block_type+1;
} 
// if the block type is determined already
else if(action=MOVE_PLACE) {
    if (block.object_index == obj_wall_hookable) image_index=1;
    else image_index=2;
}

// /32 and *32 is to make sure place_x is on a 32 by 32 grid
place_x = floor(random(room_width/32))*32
place_y = floor(random(room_height/32))*32
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
